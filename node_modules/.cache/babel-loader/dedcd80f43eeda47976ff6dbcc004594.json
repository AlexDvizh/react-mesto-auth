{"ast":null,"code":"const api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-20/',\n  headers: {\n    token: '4a3cde67-2515-4699-b4fa-4d09b066c717',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;\n\nclass Api {\n  constructor(url, token) {\n    this._address = url;\n    this._token = token;\n  } //получить ответ от сервера\n\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  } //метод получения карточки от сервера\n\n\n  getCards() {\n    return fetch(`${this._address}cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //метод добавления новой карточки\n\n\n  addNewCard(data) {\n    return fetch(`${this._address}cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data // name: data.link,\n      // link: data.link\n      )\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос информации о пользователе с сервера\n\n\n  getUserInfoFromServer() {\n    return fetch(`${this._address}users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос изменения данных профиля\n\n\n  setUserInfoFromServer(data) {\n    return fetch(`${this._address}users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${data.userName}`,\n        about: `${data.userJob}`\n      })\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос изменения фотографии аватара\n\n\n  setUserAvatar(data) {\n    return fetch(`${this._address}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.linkAvatar\n      })\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос на удаление карточки\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //выбор запроса на добавление/удаление лайка исходя из состояния лайка\n\n\n  setLikeStatus(cardId, checkElementLike) {\n    //Не получилось реализовать добавление/удаление лайка отдельными методами, \n    return fetch(`${this._address}cards/likes/${cardId}`, {\n      //без импортированния класса Api в Card. \n      method: checkElementLike ? 'DELETE' : 'PUT',\n      //Пришлось использовать объединенный метод\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/dev/mesto-react/mesto-react/src/utils/api.js"],"names":["api","Api","url","headers","token","constructor","_address","_token","_getResponse","res","ok","json","Promise","reject","status","getCards","fetch","authorization","then","addNewCard","data","method","body","JSON","stringify","getUserInfoFromServer","setUserInfoFromServer","name","userName","about","userJob","setUserAvatar","avatar","linkAvatar","deleteCard","cardId","setLikeStatus","checkElementLike"],"mappings":"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","sourcesContent":["const api = new Api({\r\n  url: 'https://mesto.nomoreparties.co/v1/cohort-20/',\r\n  headers: {\r\n    token: '4a3cde67-2515-4699-b4fa-4d09b066c717',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\nexport default api;\r\n\r\nclass Api {\r\n  constructor(url, token) {\r\n    this._address = url;\r\n    this._token = token;\r\n  }\r\n\r\n  //получить ответ от сервера\r\n  _getResponse(res) {\r\n    if(res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка ${res.status}`);\r\n  }\r\n\r\n  //метод получения карточки от сервера\r\n  getCards() {\r\n    return fetch(`${this._address}cards`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    }).then((res) => {\r\n        return this._getResponse(res);\r\n      });\r\n  }\r\n\r\n  //метод добавления новой карточки\r\n  addNewCard(data) {\r\n    return fetch(`${this._address}cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data\r\n        // name: data.link,\r\n        // link: data.link\r\n      )\r\n    })\r\n    .then((res) => {\r\n        return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос информации о пользователе с сервера\r\n  getUserInfoFromServer() {\r\n    return fetch(`${this._address}users/me`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос изменения данных профиля\r\n  setUserInfoFromServer(data) {\r\n    return fetch(`${this._address}users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: `${data.userName}`, \r\n        about: `${data.userJob}`\r\n      })\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос изменения фотографии аватара\r\n  setUserAvatar(data) {\r\n    return fetch(`${this._address}users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.linkAvatar\r\n      })\r\n    }) \r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос на удаление карточки\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._address}cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //выбор запроса на добавление/удаление лайка исходя из состояния лайка\r\n  setLikeStatus(cardId, checkElementLike) {                     //Не получилось реализовать добавление/удаление лайка отдельными методами, \r\n    return fetch(`${this._address}cards/likes/${cardId}`, {     //без импортированния класса Api в Card. \r\n      method: checkElementLike ? 'DELETE' : 'PUT',              //Пришлось использовать объединенный метод\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}