{"ast":null,"code":"class Api {\n  constructor(url, token) {\n    this._address = url;\n    this._token = token;\n  } //получить ответ от сервера\n\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  } //метод получения карточки от сервера\n\n\n  getCards() {\n    return fetch(`${this._address}cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //метод добавления новой карточки\n\n\n  addNewCard(data) {\n    return fetch(`${this._address}cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data // name: data.link,\n      // link: data.link\n      )\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос информации о пользователе с сервера\n\n\n  getUserInfoFromServer() {\n    return fetch(`${this._address}users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос изменения данных профиля\n\n\n  setUserInfoFromServer(data) {\n    return fetch(`${this._address}users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.userName,\n        about: data.userJob\n      })\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос изменения фотографии аватара\n\n\n  setUserAvatar(data) {\n    return fetch(`${this._address}users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.linkAvatar\n      })\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //запрос на удаление карточки\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  } //выбор запроса на добавление/удаление лайка исходя из состояния лайка\n\n\n  setLikeStatus(cardId, checkElementLike) {\n    return fetch(`${this._address}cards/likes/${cardId}`, {\n      method: checkElementLike ? 'DELETE' : 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._getResponse(res);\n    });\n  }\n\n}\n\nconst api = new Api('https://mesto.nomoreparties.co/v1/cohort-20/', '4a3cde67-2515-4699-b4fa-4d09b066c717');\nexport default api;","map":{"version":3,"sources":["C:/Users/User/Desktop/dev/mesto-react/mesto-react/src/utils/api.js"],"names":["Api","constructor","url","token","_address","_token","_getResponse","res","ok","json","Promise","reject","status","getCards","fetch","headers","authorization","then","addNewCard","data","method","body","JSON","stringify","getUserInfoFromServer","setUserInfoFromServer","name","userName","about","userJob","setUserAvatar","avatar","linkAvatar","deleteCard","cardId","setLikeStatus","checkElementLike","api"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor(url, token) {\r\n    this._address = url;\r\n    this._token = token;\r\n  }\r\n\r\n  //получить ответ от сервера\r\n  _getResponse(res) {\r\n    if(res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка ${res.status}`);\r\n  }\r\n\r\n  //метод получения карточки от сервера\r\n  getCards() {\r\n    return fetch(`${this._address}cards`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    }).then((res) => {\r\n        return this._getResponse(res);\r\n      });\r\n  }\r\n\r\n  //метод добавления новой карточки\r\n  addNewCard(data) {\r\n    return fetch(`${this._address}cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data\r\n        // name: data.link,\r\n        // link: data.link\r\n      )\r\n    })\r\n    .then((res) => {\r\n        return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос информации о пользователе с сервера\r\n  getUserInfoFromServer() {\r\n    return fetch(`${this._address}users/me`, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос изменения данных профиля\r\n  setUserInfoFromServer(data) {\r\n    return fetch(`${this._address}users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.userName, \r\n        about: data.userJob\r\n      })\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос изменения фотографии аватара\r\n  setUserAvatar(data) {\r\n    return fetch(`${this._address}users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.linkAvatar\r\n      })\r\n    }) \r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //запрос на удаление карточки\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._address}cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n\r\n  //выбор запроса на добавление/удаление лайка исходя из состояния лайка\r\n  setLikeStatus(cardId, checkElementLike) {                     \r\n    return fetch(`${this._address}cards/likes/${cardId}`, {     \r\n      method: checkElementLike ? 'DELETE' : 'PUT',              \r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      return this._getResponse(res);\r\n    });\r\n  }\r\n}\r\n\r\nconst api = new Api('https://mesto.nomoreparties.co/v1/cohort-20/', '4a3cde67-2515-4699-b4fa-4d09b066c717');\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}